//destination location
#define xd 10
//charger location
#define xc 0

#define v 10

[0, 100] b;
[0, 100] q;
[0, 10] time;
[0, 10] x;

// charging
// battery increment
// queue increment
// guard (enough battery to go to destination or some heuristic). go to mode 2
{mode 1;
   invt:
       (x = 0);
   flow:
	d/dt[b] = 50;
	d/dt[q] = 1;
        d/dt[x] = 0;
   jump:
        (b > 90) ==> @2(and (x' = x) (b' = b) (q' = q));
}

// go to destination
// battery decrement flying
// queue increment
// guard reached destination. go to mode 3
{mode 2;
   invt:
       (x >= 0);
       (x <= 10);
   flow:
	d/dt[b] = -1;
	d/dt[q] = 1;
        d/dt[x] = v;
   jump:
        (x = xd) ==> @3(and (x' = x) (b' = b) (q' = q));
}

// get data
// battery decrement data
// queue decrement
// guard (enough battery to go to charger or some heuristic). go to mode 4
{mode 3;
   invt:
       (x = 10);
   flow:
	d/dt[b] = -1;
	d/dt[q] = -10;
	d/dt[x] = 0;
   jump:
        (b < 10) ==> @4(and (x' = x) (b' = b) (q' = q));
}

// go to charging
// battery decrement flying
// queue increment
// guard reached charger. go to mode 1
{mode 4;
   invt:
       (x >= 0);
       (x <= 10);
   flow:
	d/dt[b] = -1;
	d/dt[q] = 1;
	d/dt[x] = -v;
   jump:
        (x = xc) ==> @1(and (x' = x) (b' = b) (q' = q));
}

init:
@1	(and (b >= 90) (q <= 10));

goal:
@3	(or (b = 0) (q = 100));
