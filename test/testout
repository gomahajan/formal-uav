(set-logic QF_NRA)
(declare-fun xi () Real)
(declare-fun x0 () Real)
(declare-fun x1 () Real)
(declare-fun x2 () Real)
(declare-fun x3 () Real)
(declare-fun bi () Real)
(declare-fun b0 () Real)
(declare-fun b1 () Real)
(declare-fun b2 () Real)
(declare-fun b3 () Real)
(declare-fun s0_qi () Real)
(declare-fun s0_q0 () Real)
(declare-fun s0_q1 () Real)
(declare-fun s0_q2 () Real)
(declare-fun s0_q3 () Real)
(declare-fun s1_qi () Real)
(declare-fun s1_q0 () Real)
(declare-fun s1_q1 () Real)
(declare-fun s1_q2 () Real)
(declare-fun s1_q3 () Real)
(declare-fun t0 () Real)
(declare-fun t1 () Real)
(declare-fun t2 () Real)
(declare-fun t3 () Real)
(declare-fun battery_charging_rate () Real)
(declare-fun battery_discharge_rate_fly () Real)
(declare-fun battery_discharge_rate_hover () Real)
(declare-fun drone_velocity () Real)
(declare-fun queue_data_rate () Real)
(declare-fun queue_upload_rate () Real)
(declare-fun s0_loc () Real)
(declare-fun s1_loc () Real)
(assert (= battery_charging_rate 50.0))
(assert (= battery_discharge_rate_fly 1.0))
(assert (= battery_discharge_rate_hover 1.0))
(assert (= drone_velocity 10.0))
(assert (= queue_data_rate 1.0))
(assert (= queue_upload_rate 1.0))
(assert (>= p0 0.0))
(assert (<= p0 100.0))

counterexamples

(check-sat)
(get-value (p0))
(exit)
