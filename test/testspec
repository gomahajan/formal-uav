// Constants
#define drone_velocity 10
#define battery_charging_rate 50
#define battery_charge_rate_fly -1
#define battery_charge_rate_hover -1
#define queue_data_rate 1
#define queue_upload_rate 50

// Variable domains
#domain x [0,10]
#domain b [,100]
#domain q [0,]

// Initial parameters (optional)
#params
p0 9
p1 0
p2 10
p3 1
p4 9
p5 9
p6 10
p7 1
p8 9
p9 9

// Environment: variable definitions
//#variables
//r = t * t

// UAV Dynamics
#uav
charge:
  d/dt[x] = 0
  d/dt[b] = battery_charging_rate * t
  program {
  ((bi >= p6) => (b0 == bi)) && ((bi < p6) => (b0 == p6))
  ((bi >= p0) && (s0_qi <= p1) && ((s1_qi + p2) <= s0_q1)) => (choice == 0)
  !((bi >= p0) && (s0_qi <= p1) && ((s1_qi + p2) <= s0_q1)) => (choice == 1)
  }
fly_to:
  d/dt[x] = drone_velocity * t
  d/dt[b] = battery_charge_rate_fly * t
download:
  d/dt[x] = 0
  d/dt[b] = battery_charge_rate_hover * t
  program {
  (choice == 0) => ((s0_q1 <= p7) => (s0_q2 == s0_q1)) && ((s0_q1 > p7) => (s0_q2 == p7))
  (choice == 1) => ((s1_q1 <= p8) => (s1_q2 == s1_q1)) && ((s1_q1 > p8) => (s1_q2 == p8))
  }
fly_back:
  d/dt[x] = -(drone_velocity * t)
  d/dt[b] = battery_charge_rate_fly * t

// Sensor dynamics
#sensor 0
x = 10
collect:
  d/dt[q] = queue_data_rate * t
upload:
  d/dt[q] = queue_upload_rate * t

#sensor 1
x = 10
collect:
  d/dt[q] = queue_data_rate * t
upload:
  d/dt[q] = queue_upload_rate * t

// Declared without indices!! (ie b instead of bi)
#invariant
((b >= p0) && (s0_q <= p1) && ((s1_q + p2) <= s0_q)) || ((b >= p3) && (s0_q <= p5) && ((s0_q + p4) <= s1_q))
