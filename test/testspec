// Constants
#define drone_velocity 10
#define battery_charging_rate 50
#define battery_charge_rate_fly -1
#define battery_charge_rate_hover -1
#define queue_data_rate 1
#define queue_upload_rate 50

// Variable domains
#domain x [0,10]
#domain b [,100]
#domain q [0,]

// Initial parameters (optional)
#params
p0 9
p1 0
p2 10
p3 1
p4 9
p5 9
p6 10
p7 1
p8 9
p9 9
p10 9
p11 9
p12 9
p13 9
p14 9
p15 9

// Variable declarations
//#variables

// UAV Dynamics
#uav
charge:
  d/dt[x] = 0
  d/dt[b] = battery_charging_rate * t
  program {
  ((bi >= p15) => (b0 == bi)) && ((bi < p15) => (b0 == p15))
  (((bi >= p0) && (s0_qi <= p1) && ((s1_qi + p2) <= s0_qi) && ((s2_qi + p3) <= s0_qi))) => (choice == 0)
  ((!(((bi >= p0) && (s0_qi <= p1) && ((s1_qi + p2) <= s0_qi) && ((s2_qi + p3) <= s0_qi)))) && ((bi >= p4) && (s1_qi <= p5) && ((s0_qi + p6) <= s1_qi) && ((s2_qi + p7) <= s1_qi))) => (choice == 1)
  ((!(((bi >= p0) && (s0_qi <= p1) && ((s1_qi + p2) <= s0_qi) && ((s2_qi + p3) <= s0_qi)))) && (!(((bi >= p4) && (s1_qi <= p5) && ((s0_qi + p6) <= s1_qi) && ((s2_qi + p7) <= s1_qi)))) && ((bi >= p8) && (s2_qi <= p9) && ((s1_qi + p10) <= s2_qi) && ((s0_qi + p11) <= s2_qi))) => (choice == 2)
  }
fly_to:
  d/dt[x] = drone_velocity * t
  d/dt[b] = battery_charge_rate_fly * t
download:
  d/dt[x] = 0
  d/dt[b] = battery_charge_rate_hover * t
  program {
  (choice == 0) => (((s0_q1 <= p12) => (s0_q2 == s0_q1)) && ((s0_q1 > p12) => (s0_q2 == p12)))
  (choice == 1) => (((s1_q1 <= p13) => (s1_q2 == s1_q1)) && ((s1_q1 > p13) => (s1_q2 == p13)))
  (choice == 2) => (((s2_q1 <= p14) => (s2_q2 == s2_q1)) && ((s2_q1 > p14) => (s2_q2 == p14)))
  }
fly_back:
  d/dt[x] = -(drone_velocity * t)
  d/dt[b] = battery_charge_rate_fly * t

// Sensor dynamics
#sensor 0
x = 10
collect:
  d/dt[q] = queue_data_rate * t
upload:
  d/dt[q] = queue_upload_rate * t

#sensor 1
x = 12
collect:
  d/dt[q] = queue_data_rate * t
upload:
  d/dt[q] = queue_upload_rate * t

#sensor 2
x = 15
collect:
  d/dt[q] = queue_data_rate * t
upload:
  d/dt[q] = queue_upload_rate * t

// Declared without indices!! (ie b instead of bi)
#invariant
((b >= p0) && (s0_q <= p1) && ((s1_q + p2) <= s0_q) && ((s2_q + p3) <= s0_q)) || ((b >= p4) && (s1_q <= p5) && ((s0_q + p6) <= s1_q) && ((s2_q + p7) <= s1_q)) || ((b >= p8) && (s2_q <= p9) && ((s1_q + p10) <= s2_q) && ((s0_q + p11) <= s2_q))
