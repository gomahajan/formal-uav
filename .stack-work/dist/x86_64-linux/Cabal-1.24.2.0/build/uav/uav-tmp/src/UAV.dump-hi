
==================== FINAL INTERFACE ====================
2017-11-30 01:00:59.4845 UTC

interface main@main:Main 8002
  interface hash: 7f452ffd7c1e6ee07f02725cf76cd40a
  ABI hash: dbf3f68364292e4e45c69f2eff9d5dae
  export-list hash: 4ca5d41b133725b13a6cdbbee7bfdb6a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4b8bf3c143fb4982e2ee7c8b02cff46c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.addConstraints
  Main.checkConstraint
  Main.genInvt
  Main.getCX
  Main.main
  Main.read
  Main.updateConstraint
module dependencies: Logic Parser Pretty SMTSolver
package dependencies: MissingH-1.4.0.1@MissingH-1.4.0.1-4I5T4TbNA9RIo1FM0FgAP
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-1aqiimsgq2dCv7eoaC8WuX
                      process-1.4.3.0@process-1.4.3.0
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-compat-0.95.1@regex-compat-0.95.1-7IGKoiHTSKL3opdpEZ0pO8
                      regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      transformers-0.5.2.0@transformers-0.5.2.0 unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.String
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
import  -/  MissingH-1.4.0.1@MissingH-1.4.0.1-4I5T4TbNA9RIo1FM0FgAP:Data.List.Utils d8dc0eb991895dd7f68592c4ace22c20
import  -/  MissingH-1.4.0.1@MissingH-1.4.0.1-4I5T4TbNA9RIo1FM0FgAP:Data.String.Utils d07478fd3c128c306c413775b726832c
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  Logic ab9e4531a868fce5f5f186c48023339d
  exports: d4445b2602a05177d47d8cbb0c085d8b
  And 1d24f1c9062a25cccb073e582733dec0
  EBin 7dce87b3ee533594b112aec22c1c0f7d
  ERealLit ae7413e5218e8b221e3ece036706e03a
  EVar 27974cb54fdbbc77c4b9aa822c029d7d
  Expr 0e334a774ef763ec0d9bf549e7cb7c9d
  Geq 0a57c29050d083148f4c41133ac903e5
  Leq e8d477fcd4809bab2b864ddbaef9cd9d
  Or acec3b5ed168439babeb51859c4acb55
  Pred fc36050633ebc606543c48defe972137
import  -/  Parser 40a55e59e13a3c083b76dab087cdeeb5
  exports: 82d0119ba25fdee023e6cc2a8334f0b2
  Response a5c1e1c6d344a6c5971d4417aadc9762
  Response f5c5bb3ce1816c180c60d1dc7df2530f
  parseDRealSat 7be09ff56d7dac9d4b19b467caa12d41
import  -/  Pretty add402bc527ff8955b8855f44302e4d5
  exports: 04dc4433aa6cf98e7f237471f4e68c83
  printConstraint' 14bfc17c8af24bfd71a32eb0d6d67404
import  -/  SMTSolver e851287304c6daab7bac51d1414065d5
  exports: 46376429425e293dd16408746b0551de
  run 471127a6d60c68d5ecedfec64cbdc976
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
cb47fb6545b61bd5ad63485ad72e694d
  $wgetCX ::
    GHC.Base.String
    -> GHC.Base.String
    -> [Parser.Assignment]
    -> GHC.Base.Maybe (GHC.Types.Double, GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (ww :: [Parser.Assignment]) ->
                 case ww of wild {
                   [] -> GHC.Base.Nothing @ (GHC.Types.Double, GHC.Types.Double)
                   : ipv ipv1
                   -> case GHC.List.lookup
                             @ GHC.Base.String
                             @ GHC.Types.Double
                             GHC.Classes.$fEq[]_$s$fEq[]1
                             w
                             wild of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing @ (GHC.Types.Double, GHC.Types.Double)
                        GHC.Base.Just x
                        -> case GHC.List.lookup
                                  @ GHC.Base.String
                                  @ GHC.Types.Double
                                  GHC.Classes.$fEq[]_$s$fEq[]1
                                  w1
                                  wild of wild2 {
                             GHC.Base.Nothing
                             -> GHC.Base.Nothing @ (GHC.Types.Double, GHC.Types.Double)
                             GHC.Base.Just y
                             -> GHC.Base.Just
                                  @ (GHC.Types.Double, GHC.Types.Double)
                                  (x, y) } } }) -}
4460a65b988e472ec3e0662ed3e20421
  addConstraints ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.addConstraints1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d75a89e554a683370774ae32b73effa8
  addConstraints1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,U>,
     Unfolding: (\ (templateFile :: GHC.Base.String)
                   (completeFile :: GHC.Base.String)
                   (constraintI :: GHC.Base.String)
                   (constraintG :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        templateFile
                        GHC.IO.IOMode.ReadMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 System.IO.writeFile1
                   completeFile
                   (case Data.List.Utils.split
                           @ GHC.Types.Char
                           GHC.Classes.$fEqChar
                           Main.addConstraints3
                           (Data.List.Utils.replace
                              @ GHC.Types.Char
                              GHC.Classes.$fEqChar
                              Main.addConstraints2
                              constraintI
                              ipv3) of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : x xs
                      -> Data.List.Utils.replace1
                           @ GHC.Types.Char
                           (GHC.Types.:
                              @ [GHC.Types.Char]
                              x
                              (Data.OldList.prependToAll @ [GHC.Types.Char] constraintG xs)) })
                   ipv2 } }) -}
de12425ef325f12d1d19d2290d633888
  addConstraints2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "constraintI"#) -}
b482921ce3e8d399d57ed3c93b600e6d
  addConstraints3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "constraintG"#) -}
3db5b8db10fe644b24eb1f4c0edceca8
  checkConstraint ::
    GHC.Base.String
    -> GHC.Base.String
    -> Logic.Pred
    -> GHC.Types.IO
         (GHC.Base.Maybe (GHC.Types.Double, GHC.Types.Double))
  {- Arity: 4, Strictness: <L,U><L,U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.checkConstraint1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Logic.Pred>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <GHC.Base.Maybe (GHC.Types.Double, GHC.Types.Double)>_R)) -}
fc84989d711dcc9059ffe1b6b1fbe236
  checkConstraint1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> Logic.Pred
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe (GHC.Types.Double, GHC.Types.Double) #)
  {- Arity: 4, Strictness: <L,U><L,U><L,1*U><S,U>,
     Unfolding: (\ (tmpf :: GHC.Base.String)
                   (outf :: GHC.Base.String)
                   (p :: Logic.Pred)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   constraint :: GHC.Base.String = Pretty.printConstraint' p
                 } in
                 case Main.addConstraints1
                        tmpf
                        outf
                        (case Data.List.Utils.split
                                @ GHC.Types.Char
                                GHC.Classes.$fEqChar
                                Main.checkConstraint7
                                (Data.List.Utils.replace
                                   @ GHC.Types.Char
                                   GHC.Classes.$fEqChar
                                   Main.checkConstraint6
                                   Main.checkConstraint5
                                   constraint) of wild {
                           [] -> GHC.Types.[] @ GHC.Types.Char
                           : x xs
                           -> Data.List.Utils.replace1
                                @ GHC.Types.Char
                                (GHC.Types.:
                                   @ [GHC.Types.Char]
                                   x
                                   (Data.OldList.prependToAll
                                      @ [GHC.Types.Char]
                                      Main.checkConstraint4
                                      xs)) })
                        (case Data.List.Utils.split
                                @ GHC.Types.Char
                                GHC.Classes.$fEqChar
                                Main.checkConstraint7
                                (Data.List.Utils.replace
                                   @ GHC.Types.Char
                                   GHC.Classes.$fEqChar
                                   Main.checkConstraint6
                                   Main.checkConstraint3
                                   constraint) of wild {
                           [] -> GHC.Types.[] @ GHC.Types.Char
                           : x xs
                           -> Data.List.Utils.replace1
                                @ GHC.Types.Char
                                (GHC.Types.:
                                   @ [GHC.Types.Char]
                                   x
                                   (Data.OldList.prependToAll
                                      @ [GHC.Types.Char]
                                      Main.checkConstraint2
                                      xs)) })
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case SMTSolver.run1 outf ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    case Parser.parseDRealSat ipv3 of ww { Parser.Response ww1 ww2 ->
                    Main.$wgetCX
                      Main.checkConstraint3
                      Main.checkConstraint2
                      ww2 } #) } }) -}
90f40fbcd4fa789b018ef50cffb30e96
  checkConstraint2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "q3"#) -}
a0c8c5224b81e0bb522d1e7f48ba3cfa
  checkConstraint3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "b3"#) -}
5d34d310d26420e9ee9e10486e61957b
  checkConstraint4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "qi"#) -}
3c9eaa9399ae9d5a02b6712202627973
  checkConstraint5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "bi"#) -}
144763045c70b97f9f8eda84707ebb29
  checkConstraint6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "b"#) -}
01cad0340207c9b42c25bcccb3a2df09
  checkConstraint7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "q"#) -}
100894a19d058250a3d2597f583e0f64
  genInvt ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> Logic.Pred
    -> GHC.Types.IO (GHC.Base.Maybe (Logic.Pred, GHC.Types.Bool))
  {- Arity: 5, Strictness: <L,U><L,U><L,1*U(1*U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.genInvt1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Logic.Pred>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <GHC.Base.Maybe (Logic.Pred, GHC.Types.Bool)>_R)) -}
78e6ba4bda674d0b11fdcfb7ff38cefb
  genInvt1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> Logic.Pred
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe (Logic.Pred, GHC.Types.Bool) #)
  {- Arity: 5, Strictness: <L,U><L,U><L,1*U(1*U)><L,U><S,U> -}
36a08dc8225cc085ef717c64f302aac8
  getCX ::
    GHC.Base.String
    -> GHC.Base.String
    -> Parser.Response
    -> GHC.Base.Maybe (GHC.Types.Double, GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,U><S(LS),1*U(A,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: Parser.Response) ->
                 case w2 of ww { Parser.Response ww1 ww2 ->
                 Main.$wgetCX w w1 ww2 }) -}
d9c0dee8a685c5ed422401aaa63f23bf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
01d62c2c484918d4b5d94b688c90c90e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
129a1a814fa667791781f32a098e848d
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
03d1f330964597ea61c90e64816c4976
  read :: GHC.Base.String -> GHC.Types.IO Parser.Response
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.read1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Parser.Response>_R)) -}
ec7394d5a2b1a0edc0d387b04cd7af25
  read1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Parser.Response #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (src :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Parser.parseDRealSat src #)) -}
cfcaad43098d8bab8d882fb31f385651
  updateConstraint ::
    (GHC.Types.Double, GHC.Types.Double) -> Logic.Pred -> Logic.Pred
  {- Arity: 2, Strictness: <S,1*U(U,U)><L,U>m4,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (GHC.Types.Double, GHC.Types.Double))
                   (eta :: Logic.Pred) ->
                 case ds of wild { (,) b q ->
                 Logic.Or
                   (Logic.And
                      (Logic.Expr
                         (Logic.EBin Logic.Geq Main.updateConstraint2 (Logic.ERealLit b)))
                      (Logic.Expr
                         (Logic.EBin Logic.Leq Main.updateConstraint1 (Logic.ERealLit q))))
                   eta }) -}
5d620334adb04a8a27240a92050fc42e
  updateConstraint1 :: Logic.Exp
  {- Strictness: m7, Unfolding: (Logic.EVar Main.checkConstraint7) -}
c6cee129a92dbe629b246fc5e56c4098
  updateConstraint2 :: Logic.Exp
  {- Strictness: m7, Unfolding: (Logic.EVar Main.checkConstraint6) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

